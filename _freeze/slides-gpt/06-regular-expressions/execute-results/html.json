{
  "hash": "75b747d9d12dd20a14cdebedb377d953",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 15 - Regex\nbook: R4DS\nlink: \"[https://r4ds.hadley.nz/regexps.html](https://r4ds.hadley.nz/regexps.html)\"\n---\n\n\n\n\n## Data and packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(babynames)\n```\n:::\n\n\n\n\n\n## Data and packages\n\n-   `fruit` contains the names of 80 fruits.\n-   `words` contains 980 common English words.\n-   `sentences` contains 720 short sentences.\n\n## Pattern basics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"berry\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [6] │ bil<berry>\n [7] │ black<berry>\n[10] │ blue<berry>\n[11] │ boysen<berry>\n[19] │ cloud<berry>\n[21] │ cran<berry>\n[29] │ elder<berry>\n[32] │ goji <berry>\n[33] │ goose<berry>\n[38] │ huckle<berry>\n[50] │ mul<berry>\n[70] │ rasp<berry>\n[73] │ salal <berry>\n[76] │ straw<berry>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"a\", \"ab\", \"ae\", \"bd\", \"ea\", \"eab\"), \"a.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <ab>\n[3] │ <ae>\n[6] │ e<ab>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"a...e\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] │ <apple>\n [7] │ bl<ackbe>rry\n[48] │ mand<arine>\n[51] │ nect<arine>\n[62] │ pine<apple>\n[64] │ pomegr<anate>\n[70] │ r<aspbe>rry\n[73] │ sal<al be>rry\n```\n\n\n:::\n:::\n\n\n\n\n## Pattern basics\n\n**Quantifiers** control how many times a pattern can match:\n\n-   `?` makes a pattern optional (i.e. it matches 0 or 1 times)\n-   `+` lets a pattern repeat (i.e. it matches at least once)\n-   `*` lets a pattern be optional or repeat (i.e. it matches any number of times, including 0).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ab? matches an \"a\", optionally followed by a \"b\".\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a>\n[2] │ <ab>\n[3] │ <ab>b\n```\n\n\n:::\n\n```{.r .cell-code}\n# ab+ matches an \"a\", followed by at least one \"b\".\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <ab>\n[3] │ <abb>\n```\n\n\n:::\n\n```{.r .cell-code}\n# ab* matches an \"a\", followed by any number of \"b\"s.\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab*\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a>\n[2] │ <ab>\n[3] │ <abb>\n```\n\n\n:::\n:::\n\n\n\n\n## Pattern basics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words, \"[aeiou]x[aeiou]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[284] │ <exa>ct\n[285] │ <exa>mple\n[288] │ <exe>rcise\n[289] │ <exi>st\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(words, \"[^aeiou]y[^aeiou]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[836] │ <sys>tem\n[901] │ <typ>e\n```\n\n\n:::\n:::\n\n\n\n\n## Pattern basics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"apple|melon|nut\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] │ <apple>\n[13] │ canary <melon>\n[20] │ coco<nut>\n[52] │ <nut>\n[62] │ pine<apple>\n[72] │ rock <melon>\n[80] │ water<melon>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"aa|ee|ii|oo|uu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [9] │ bl<oo>d orange\n[33] │ g<oo>seberry\n[47] │ lych<ee>\n[66] │ purple mangost<ee>n\n```\n\n\n:::\n:::\n\n\n\n\n## Detect matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(c(\"a\", \"b\", \"c\"), \"[aeiou]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\n\n## Detect matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  filter(str_detect(name, \"x\")) |> \n  count(name, wt = n, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 974 × 2\n   name            n\n   <chr>       <int>\n 1 Alexander  665492\n 2 Alexis     399551\n 3 Alex       278705\n 4 Alexandra  232223\n 5 Max        148787\n 6 Alexa      123032\n 7 Maxine     112261\n 8 Alexandria  97679\n 9 Maxwell     90486\n10 Jaxon       71234\n# ℹ 964 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Detect matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  group_by(year) |> \n  summarize(prop_x = mean(str_detect(name, \"x\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 138 × 2\n    year  prop_x\n   <dbl>   <dbl>\n 1  1880 0.0065 \n 2  1881 0.00879\n 3  1882 0.00940\n 4  1883 0.00768\n 5  1884 0.00827\n 6  1885 0.00872\n 7  1886 0.00878\n 8  1887 0.00801\n 9  1888 0.00905\n10  1889 0.00888\n# ℹ 128 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Count matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"banana\", \"pear\")\nstr_count(x, \"p\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 0 1\n```\n\n\n:::\n:::\n\n\n\n\n## Count matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_count(\"abababa\", \"aba\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(\"abababa\", \"aba\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <aba>b<aba>\n```\n\n\n:::\n:::\n\n\n\n\n## Count matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  count(name) |> \n  mutate(\n    vowels = str_count(name, \"[aeiou]\"),\n    consonants = str_count(name, \"[^aeiou]\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 97,310 × 4\n   name          n vowels consonants\n   <chr>     <int>  <int>      <int>\n 1 Aaban        10      2          3\n 2 Aabha         5      2          3\n 3 Aabid         2      2          3\n 4 Aabir         1      2          3\n 5 Aabriella     5      4          5\n 6 Aada          1      2          2\n 7 Aadam        26      2          3\n 8 Aadan        11      2          3\n 9 Aadarsh      17      2          5\n10 Aaden        18      2          3\n# ℹ 97,300 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Count matches\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  count(name) |> \n  mutate(\n    name = str_to_lower(name),\n    vowels = str_count(name, \"[aeiou]\"),\n    consonants = str_count(name, \"[^aeiou]\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 97,310 × 4\n   name          n vowels consonants\n   <chr>     <int>  <int>      <int>\n 1 aaban        10      3          2\n 2 aabha         5      3          2\n 3 aabid         2      3          2\n 4 aabir         1      3          2\n 5 aabriella     5      5          4\n 6 aada          1      3          1\n 7 aadam        26      3          2\n 8 aadan        11      3          2\n 9 aadarsh      17      3          4\n10 aaden        18      3          2\n# ℹ 97,300 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Replace values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"pear\", \"banana\")\nstr_replace_all(x, \"[aeiou]\", \"-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"-ppl-\"  \"p--r\"   \"b-n-n-\"\n```\n\n\n:::\n:::\n\n\n\n\n## Replace values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"pear\", \"banana\")\nstr_remove_all(x, \"[aeiou]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ppl\" \"pr\"  \"bnn\"\n```\n\n\n:::\n:::\n\n\n\n\n## Anchors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"^a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a>pple\n[2] │ <a>pricot\n[3] │ <a>vocado\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"a$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [4] │ banan<a>\n[15] │ cherimoy<a>\n[30] │ feijo<a>\n[36] │ guav<a>\n[56] │ papay<a>\n[74] │ satsum<a>\n```\n\n\n:::\n:::\n\n\n\n\n## Anchors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"apple\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] │ <apple>\n[62] │ pine<apple>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"^apple$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <apple>\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}