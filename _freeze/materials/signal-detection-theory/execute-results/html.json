{
  "hash": "f23ec245900dd011e782639c8604b8e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Signal Detection Theory\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::load_all()\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(here)\n\nmtheme <- function(){\n    theme_minimal(20)\n}\n\ntheme_set(mtheme())\n\nfuns <- filor::get_funs(here(\"R\", \"utils-glm_phd.R\"))\n```\n:::\n\n\n\n\n# Probit link {.section}\n\n## Probit link\n\n- The mostly used *link function* when using a binomial GLM is the **logit link**. The **probit** link is another *link function* that can be used. The overall approach is the same between **logit** and **probit** models. The only difference is the parameter interpretation (i.e., no odds ratios) and the specific link function (and the inverse) to use.\n- The **probit** model use the **cumulative normal distribution** but the actual difference with a **logit** functions is neglegible.\n\n## Probit link\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Probit link\n\nWhen using the **probit link** the parameters are interpreted as difference in *z-scores* associated with a unit increase in the predictors. In fact probabilities are mapped into *z-scores* using the cumulative normal distribution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- 0.7\np2 <- 0.5\n\nqlogis(c(p1, p2)) # log(odds(p1)), logit link\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8472979 0.0000000\n```\n\n\n:::\n\n```{.r .cell-code}\nqnorm(c(p1, p2)) # probit link\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5244005 0.0000000\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(odds_ratio(p1, p2)) # ~ beta1, logit link\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8472979\n```\n\n\n:::\n\n```{.r .cell-code}\npnorm(p1) - pnorm(p2) # ~beta1, probit link\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.06657389\n```\n\n\n:::\n:::\n\n\n\n## Probit link\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Signal Detection Theory\n\nIl modello probit è utilizzato per stimare i parametri della **signal detection theory**.\n\nBrevemente l'idea è quella di modellare decisioni binarie (o anche come rating) rispetto a come uno stimolo viene percepito ed elaborato internamente.\n\nLa teoria (nella sua versione di base) assume che uno stimolo (segnale) venga elaborato e l'informazione contenuta sostenga un qualche tipo di decisione su questo stimolo.\n\nAd esempio, immaginiamo di voler valutare la capacità di un radiologo di rilevare la presenza di un'anomalia in una radiografia. Possiamo immaginare di prendere 100 radiografie. 50 di queste contengono un'anomalia (signal trials) mentre 50 non la contengono (catch trials).\n\nPer ogni radiografia, chiediamo ai radiologi di valutare se rilevano un'anomalia oppure no.\n\nIncrociando lo stimolo (signal o catch) e la risposta (presente o assente) otteniamo una tipica tabella di contingenza 2x2, simile a quello che si ottiene nei test diagnostici.\n\n|              | Segnale: Si | Segnale: No            |\n|--------------|-------------|------------------------|\n| **Risposta: Si** | Hit (H)     | False Alarm (FA)       |\n| **Risposta: No** | Miss (M)    | Correct Rejection (CR) |\n\nIn questo tipo di classificazione solitamente è ottimale massimizzare gli Hit (o True Positive) e minimizzare i False Alarm (False Positive).\n\nLa teoria formalizza che le distribuzioni del segnale e del rumore sono delle Gaussiane standard. La distribuzione del rumore ha $\\mu = 0$ mentre la distribuzione del segnale ha $\\mu = d'$. In questo modo il parametro $d'$ (pronunciato d-prime) rappresenta il grado di separazione tra segnale e rumore.\n\nUna radiografia che contiene un segno chiaramente visibile avrà molta separazione tra le due distribuzioni mentre una radiografia con un segnale molto debole avrà più sovrapposizione.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nOra, questa rappresentazione interna del segnale e del rumore che dipende dal tipo di stimolo e dall'abilità del soggetto. Tuttavia noi non osserviamo direttamente questa variabile latente ma la riposta si/no del soggetto.\n\nIl soggetto quindi, in base ad un qualche tipo di regola interna, decide di rispondere. La SDT formalizza questa regola interna come una soglia (*criterio*) che viene decisa internamente dal soggetto. Se in quel trial (radiografia) il segnale supera la soglia, il soggetto risponde **Si**, se non supera la soglia il soggetto risponde no.\n\nQuindi con la stessa intensità del segnale $d'$ soggetti diversi o lo stesso soggetto in condizioni diverse può avere un pattern di risposte diverse.\n\nCi sono alcuni punti importanti:\n\n- qualcunque criterio si scelga (in condizioni plausibili) non è mai possibile annullare i falsi allarmi e massimizzare gli hit\n- quando il criterio è nel mezzo tra le due distribuzioni ($d'/2$) viene definito unbiased\n- quando il soggetto (a prescindere dal segnale) tende a dare più risposte si viene definito un criterio liberale\n- quando il soggetto (a prescindere dal segnale) tende a dare più risposte no viene definito un criterio conservatore\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\nQuindi, per ogni possibile criterio (assumendo di poterlo variare sperimentalmente) abbiamo una diversa tabella di contingenza. Se lo facciamo tante volte, otteniamo una curva:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nd <- 1\ndat <- sim_sdt(1e3, d = d, 0.5)\nmid <- d/2\ncr <- c(-Inf, seq(mid - 4, mid + 4, 0.001), Inf)\nres <- sdt(is_signal = dat$is_signal, x = dat$x, c = cr)\n\ndata.frame(res) |> \n    ggplot(aes(x = pfa, y = phit)) +\n    geom_line() +\n    ylim(c(0, 1)) +\n    scale_x_reverse(limits = c(1, 0)) +\n    geom_abline(slope = -1, col = alpha(\"black\", 0.5)) +\n    xlab(\"P (FA)\") +\n    ylab(\"P (Hit)\") +\n    ggtitle(\"d' = 1\")\n```\n\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nQuesta in altri contesti (come quello dei test diagnostici) viene chiamata curva di ROC. Infatti l'*area under the curve* (AUC) assumendo la normalità delle due distribuzioni è:\n\n$$\n\\mbox{AUC} = \\Phi(\\frac{d'}{\\sqrt{2}})\n$$\nQuindi:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- 1 # dalla simulazione precedente\npnorm(1 / sqrt(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7602499\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(res) |> \n    pivot_longer(c(phit, pfa, pmiss, pcr)) |> \n    ggplot(aes(x = c, y = value, color = name)) +\n    geom_line() +\n    theme(legend.title = element_blank()) +\n    xlab(\"Criterio\") +\n    ylab(\"Probabilità\")\n```\n\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nTornando all'esperimento delle radiografie, quello che osserviamo empiricamente è qualcosa di questo tipo (dati simulati usando `sim_sdt()`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- sim_sdt(100, 1, c = 0.5) |> \n    select(-x)\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  say_signal is_signal\n1          0         0\n2          0         1\n3          0         0\n4          0         1\n5          1         0\n6          1         1\n```\n\n\n:::\n:::\n\n\n\nDove `is_signal` indica se la radiografia contiene il segnale o no e `say_signal` indica la risposta del soggetto.\n\nIn questo caso il $d'$ è la distanza tra la distribuzione latente di segnale e rumore e $c$ è il criterio di risposta.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl <- sdt(is_signal = dat$is_signal, dat$say_signal)\ncl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$hit\n[1] 13\n\n$miss\n[1] 12\n\n$fa\n[1] 5\n\n$cr\n[1] 20\n\n$phit\n[1] 0.52\n\n$pfa\n[1] 0.2\n\n$pmiss\n[1] 0.48\n\n$pcr\n[1] 0.8\n\n$c\n[1] NA\n```\n\n\n:::\n:::\n\n\n\nPossiamo semplicemente calcolare la distanza tra le due distribuzioni, assumendo che siano gaussiane a varianza 1:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dprime\nqnorm(cl$phit) - qnorm(cl$pfa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8917748\n```\n\n\n:::\n\n```{.r .cell-code}\n# criterio\n-(qnorm(cl$phit) + qnorm(cl$pfa)) / 2 # - perchè per convenzione c negativo = liberale, c positivo = conservatore\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3957338\n```\n\n\n:::\n:::\n\n\n\nGli stessi parametri possono essere stimati con un `glm` binomiale con link function `probit`. Infatti il criterio è il punto di mezzo tra signal e noise mentre il $d'$ non è altro che la distanza tra le due distribuzioni (di segnale e rumore).\n\nSe facciamo un modello predicendo le risposte (binarie) con il tipo di trial (binario) otteniamo esattamente questi parametri.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$say_signal01 <- as.integer(as.character(dat$say_signal))\n\nfit <- glm(say_signal01 ~ is_signal, data = dat, family = binomial(link = \"probit\"))\n\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = say_signal01 ~ is_signal, family = binomial(link = \"probit\"), \n    data = dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)  \n(Intercept)  0.05015    0.25078   0.200    0.841  \nis_signal0  -0.89177    0.38019  -2.346    0.019 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 65.342  on 49  degrees of freedom\nResidual deviance: 59.637  on 48  degrees of freedom\nAIC: 63.637\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n:::\n\n\n\nL'intercetta è la probabilità (in $z$ scores) di rispondere Si quando il segnale è 0 (catch). Quindi è la probabilità di fare falsi allarmi.\n\nLa slope è la distanza (in $z$ scores) tra i trial con il segnale e con il rumore che è esattamente il concetto di $d'$. Cambia solo il segno rispetto a quello calcolato manualmente.\n\nPer calcolare anche il criterio nel modo convenzionale è sufficiente centrare il predittore `is_signal`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- glm(say_signal01 ~ is_signal, \n           data = dat,\n           contrasts = list(is_signal = contr.sum(2)/2), # -0.5, 0.5\n           family = binomial(link = \"probit\"))\n\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = say_signal01 ~ is_signal, family = binomial(link = \"probit\"), \n    data = dat, contrasts = list(is_signal = contr.sum(2)/2))\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)  \n(Intercept)  -0.3957     0.1901  -2.082   0.0374 *\nis_signal1    0.8918     0.3802   2.346   0.0190 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 65.342  on 49  degrees of freedom\nResidual deviance: 59.637  on 48  degrees of freedom\nAIC: 63.637\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n:::\n\n\nAttenzione che per come è parametrizzato, il criterio ha il segno opposto rispetto a quello convenzionale.\n\nIl vantaggio è che possiamo inserire dei predittori sia per il criterio che per il $d'$. Ad esempio, immaginiamo che ci siano 100 radiografie che indagano un'ipotetica condizione a bassa mortalità vs una condizione ad alta mortalità. Potremmo immaginare che in funzione dell'incentivo decisionale lo stile di risposta possa cambiare (da più a meno conservativo/liberale).\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  say_signal is_signal          x cond\n1          1         0 -0.1394558  low\n2          1         1  0.9247223  low\n3          1         0  0.4679482  low\n4          1         1  2.5450425  low\n5          0         0 -0.6927086  low\n6          1         1 -0.3094458  low\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_low <- glm(say_signal ~ is_signal,\n               subset = cond == \"low\",\n               contrasts = list(is_signal = -contr.sum(2)/2),\n               data = dat, \n               family = binomial(link = \"probit\"))\n\nfit_high <- glm(say_signal ~ is_signal,\n               subset = cond == \"high\",\n               contrasts = list(is_signal = -contr.sum(2)/2),\n               data = dat, \n               family = binomial(link = \"probit\"))\n\n\nfit <- glm(say_signal ~ is_signal * cond, \n           contrasts = list(is_signal = -contr.sum(2)/2),\n           data = dat, \n           family = binomial(link = \"probit\"))\n\n\ncar::compareCoefs(fit_low, fit_high, fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCalls:\n1: glm(formula = say_signal ~ is_signal, family = binomial(link = \"probit\"),\n   data = dat, subset = cond == \"low\", contrasts = list(is_signal = \n  -contr.sum(2)/2))\n2: glm(formula = say_signal ~ is_signal, family = binomial(link = \"probit\"),\n   data = dat, subset = cond == \"high\", contrasts = list(is_signal = \n  -contr.sum(2)/2))\n3: glm(formula = say_signal ~ is_signal * cond, family = binomial(link = \n  \"probit\"), data = dat, contrasts = list(is_signal = -contr.sum(2)/2))\n\n                   Model 1 Model 2 Model 3\n(Intercept)        -0.4798  0.5210  0.5210\nSE                  0.0195  0.0197  0.0197\n                                          \nis_signal1          0.9837  1.0139  1.0139\nSE                  0.0390  0.0395  0.0395\n                                          \ncondlow                            -1.0008\nSE                                  0.0278\n                                          \nis_signal1:condlow                 -0.0301\nSE                                  0.0555\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(multcomp)\n\nglht(fit, \n     linfct = c(\n         \"-(Intercept) == 0\",\n         # criterion low\n         \"-(Intercept) + condlow == 0\",\n         # dprime condition high\n         \"is_signal1 == 0\",\n         # dprime condition low\n         \"is_signal1 + is_signal1:condlow == 0\",\n         # difference between criterion\n         \"condlow == 0\",\n         # difference between dprime\n         \"is_signal1:condlow == 0\"\n     )\n) |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\t Simultaneous Tests for General Linear Hypotheses\n\nFit: glm(formula = say_signal ~ is_signal * cond, family = binomial(link = \"probit\"), \n    data = dat, contrasts = list(is_signal = -contr.sum(2)/2))\n\nLinear Hypotheses:\n                                     Estimate Std. Error z value Pr(>|z|)    \n-(Intercept) == 0                    -0.52097    0.01975 -26.379   <1e-05 ***\n-(Intercept) + condlow == 0          -1.52176    0.04405 -34.546   <1e-05 ***\nis_signal1 == 0                       1.01386    0.03950  25.668   <1e-05 ***\nis_signal1 + is_signal1:condlow == 0  0.98373    0.03900  25.223   <1e-05 ***\ncondlow == 0                         -1.00080    0.02775 -36.059   <1e-05 ***\nis_signal1:condlow == 0              -0.03012    0.05551  -0.543    0.964    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Adjusted p values reported -- single-step method)\n```\n\n\n:::\n:::\n\n\n\nInfine, un aspetto interessante è che in qualunque caso, il criterio unbiased è quello che massimizza l'accuratezza intesa come HIT + CR.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- sim_sdt(1e4, 1, 0)\ncr <- seq(-3, 3, 0.1)\nres <- sdt(dat$is_signal, x = dat$x, c = cr)\nres <- data.frame(res)\n\nres |> \n    mutate(acc = 0.5 * (phit + pcr)) |> \n    ggplot(aes(x = c, y = acc)) +\n    geom_line() +\n    xlab(\"Criterio\") +\n    ylab(\"pCR + pHIT\")\n```\n\n::: {.cell-output-display}\n![](signal-detection-theory_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nPer tutti gli esempi ho simulato i dati usando due funzioni custom:\n\n\n\n```r\nsim_sdt <- function(nt, d, c = 0, ps = 0.5, sr = 1){\n  ns <- floor(ps * nt)\n  nn <- nt - ns\n  is_signal <- rep(c(0, 1), nn, ns)\n  x <- ifelse(is_signal == 1, rnorm(ns, d/2, sr), rnorm(nn, -d/2, 1))\n  say_signal <- ifelse(x > c, 1, 0)\n  is_signal <- factor(is_signal, levels = c(1,0))\n  say_signal <- factor(say_signal, levels = c(1,0))\n  data.frame(say_signal, is_signal, x)\n}\nsdt <- function(is_signal, say_signal = NULL, x = NULL, c = NULL){\n\n  if(is.null(say_signal)){\n    say_signal <- lapply(c, function(ci) ifelse(x > ci, 1, 0))\n  }else{\n    say_signal <- list(say_signal)\n    c <- NA\n  }\n\n  hit <- miss <- fa <- cr <- rep(0, length(c))\n\n  for(i in 1:length(c)){\n    hit[i] <- sum(is_signal == 1 & say_signal[[i]] == 1)\n    miss[i] <- sum(is_signal == 1 & say_signal[[i]] == 0)\n    fa[i] <- sum(is_signal == 0 & say_signal[[i]] == 1)\n    cr[i] <- sum(is_signal == 0 & say_signal[[i]] == 0)\n  }\n\n  list(hit = hit,\n       miss = miss,\n       fa = fa,\n       cr = cr,\n       phit = hit / (hit + miss),\n       pfa = fa / (fa + cr),\n       pmiss = miss / (miss + hit),\n       pcr = cr / (cr + fa),\n       c = c)\n}\n```\n",
    "supporting": [
      "signal-detection-theory_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}