{
  "hash": "493a4ab1b160e14343a1aebfb8693390",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Base R vs Tidyverse\"\nformat: html\nexecute: \n  echo: true\n---\n\n\n\n# Problem Description\n\nIn this exercise, we will use two datasets: \n\n1. The `iris` dataset for complex operations on grouped data.\n2. The `mtcars` dataset for reshaping between long and wide formats.\n\nThis will allow us to compare different data manipulation tasks using base R and the tidyverse.\n\n# Task 1: Complex Operations on Grouped Data\n\nWe will calculate the mean and standard deviation for each measurement (`Sepal.Length`, `Sepal.Width`, `Petal.Length`, `Petal.Width`) by species.\n\n## Base R Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the iris dataset\ndata(iris)\n\n# Base R approach using tapply and aggregate\nmean_sd_base <- aggregate(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data = iris, \n                          FUN = function(x) c(mean = mean(x), sd = sd(x)))\n\n# Flatten the results\nmean_sd_base <- do.call(data.frame, mean_sd_base)\n\n# Display the result\nmean_sd_base\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Species Sepal.Length.mean Sepal.Length.sd Sepal.Width.mean Sepal.Width.sd\n1     setosa             5.006       0.3524897            3.428      0.3790644\n2 versicolor             5.936       0.5161711            2.770      0.3137983\n3  virginica             6.588       0.6358796            2.974      0.3224966\n  Petal.Length.mean Petal.Length.sd Petal.Width.mean Petal.Width.sd\n1             1.462       0.1736640            0.246      0.1053856\n2             4.260       0.4699110            1.326      0.1977527\n3             5.552       0.5518947            2.026      0.2746501\n```\n\n\n:::\n:::\n\n\n\n## Tidyverse Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the tidyverse package\nlibrary(tidyverse)\n\n# Tidyverse approach using dplyr\nmean_sd_tidy <- iris %>%\n  group_by(Species) %>%\n  summarize(across(starts_with(\"Sepal\") | starts_with(\"Petal\"), \n                   list(mean = ~mean(.), sd = ~sd(.)), \n                   .names = \"{col}_{fn}\"))\n\n# Display the result\nmean_sd_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 9\n  Species    Sepal.Length_mean Sepal.Length_sd Sepal.Width_mean Sepal.Width_sd\n  <fct>                  <dbl>           <dbl>            <dbl>          <dbl>\n1 setosa                  5.01           0.352             3.43          0.379\n2 versicolor              5.94           0.516             2.77          0.314\n3 virginica               6.59           0.636             2.97          0.322\n# ℹ 4 more variables: Petal.Length_mean <dbl>, Petal.Length_sd <dbl>,\n#   Petal.Width_mean <dbl>, Petal.Width_sd <dbl>\n```\n\n\n:::\n:::\n\n\n\n# Task 2: Reshaping Data (Long to Wide and Back)\n\nWe will reshape the `mtcars` dataset by converting it into a long format where each measurement is recorded separately for each car model, and then back into a wide format.\n\n## Base R Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the mtcars dataset\ndata(mtcars)\n\n# Add car names as a column instead of row names\nmtcars$car <- rownames(mtcars)\n\n# Base R approach to long format\nmtcars_long_base <- reshape(mtcars, idvar = \"car\", varying = names(mtcars)[1:11], \n                            v.names = \"value\", timevar = \"variable\", \n                            times = names(mtcars)[1:11], direction = \"long\")\n\n# Back to wide format\nmtcars_wide_base <- reshape(mtcars_long_base, idvar = \"car\", timevar = \"variable\", \n                            direction = \"wide\")\n\n# Display results\nhead(mtcars_long_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                    car variable value\nMazda RX4.mpg                 Mazda RX4      mpg  21.0\nMazda RX4 Wag.mpg         Mazda RX4 Wag      mpg  21.0\nDatsun 710.mpg               Datsun 710      mpg  22.8\nHornet 4 Drive.mpg       Hornet 4 Drive      mpg  21.4\nHornet Sportabout.mpg Hornet Sportabout      mpg  18.7\nValiant.mpg                     Valiant      mpg  18.1\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(mtcars_wide_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                    car value.mpg value.cyl value.disp value.hp\nMazda RX4.mpg                 Mazda RX4      21.0         6        160      110\nMazda RX4 Wag.mpg         Mazda RX4 Wag      21.0         6        160      110\nDatsun 710.mpg               Datsun 710      22.8         4        108       93\nHornet 4 Drive.mpg       Hornet 4 Drive      21.4         6        258      110\nHornet Sportabout.mpg Hornet Sportabout      18.7         8        360      175\nValiant.mpg                     Valiant      18.1         6        225      105\n                      value.drat value.wt value.qsec value.vs value.am\nMazda RX4.mpg               3.90    2.620      16.46        0        1\nMazda RX4 Wag.mpg           3.90    2.875      17.02        0        1\nDatsun 710.mpg              3.85    2.320      18.61        1        1\nHornet 4 Drive.mpg          3.08    3.215      19.44        1        0\nHornet Sportabout.mpg       3.15    3.440      17.02        0        0\nValiant.mpg                 2.76    3.460      20.22        1        0\n                      value.gear value.carb\nMazda RX4.mpg                  4          4\nMazda RX4 Wag.mpg              4          4\nDatsun 710.mpg                 4          1\nHornet 4 Drive.mpg             3          1\nHornet Sportabout.mpg          3          2\nValiant.mpg                    3          1\n```\n\n\n:::\n:::\n\n\n\n## Tidyverse Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidyverse approach to long format\nmtcars_long_tidy <- mtcars %>% \n  pivot_longer(cols = -car, names_to = \"variable\", values_to = \"value\")\n\n# Back to wide format\nmtcars_wide_tidy <- mtcars_long_tidy %>% \n  pivot_wider(names_from = variable, values_from = value)\n\n# Display results\nhead(mtcars_long_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  car       variable  value\n  <chr>     <chr>     <dbl>\n1 Mazda RX4 mpg       21   \n2 Mazda RX4 cyl        6   \n3 Mazda RX4 disp     160   \n4 Mazda RX4 hp       110   \n5 Mazda RX4 drat       3.9 \n6 Mazda RX4 wt         2.62\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(mtcars_wide_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n  car            mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Mazda RX4     21       6   160   110  3.9   2.62  16.5     0     1     4     4\n2 Mazda RX4 W…  21       6   160   110  3.9   2.88  17.0     0     1     4     4\n3 Datsun 710    22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\n4 Hornet 4 Dr…  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\n5 Hornet Spor…  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\n6 Valiant       18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\n```\n\n\n:::\n:::\n\n\n\n# Comparison of Base R and Tidyverse\n\n## Pros and Cons of Base R\n\n### Pros:\n- **Flexibility**: Base R allows detailed control over transformations.\n- **No external dependencies**: No need to install additional packages.\n- **Suitable for simple tasks**: If transformations are minimal, base R can be effective.\n\n### Cons:\n- **Verbose**: Base R code for reshaping data is long and requires multiple parameters.\n- **Less intuitive**: The syntax for `reshape()` can be confusing.\n- **More manual work**: Intermediate steps often need to be managed explicitly.\n\n## Pros and Cons of Tidyverse\n\n### Pros:\n- **Concise and readable**: Functions like `pivot_longer()` and `pivot_wider()` are intuitive.\n- **Streamlined workflow**: Tidyverse simplifies common operations like grouping and reshaping.\n- **Better suited for modern data analysis**: Works well with pipes and declarative transformations.\n\n### Cons:\n- **Requires package installation**: Tidyverse needs additional dependencies.\n- **Learning curve**: Users new to functional programming might need time to adapt.\n- **May not cover every niche use case**: Highly specific transformations might need workarounds.\n\n# Summary\n\nWe compared base R and tidyverse methods for complex grouped operations and reshaping data between long and wide formats. The tidyverse offers a more readable and efficient approach, particularly for grouped data and reshaping tasks. Base R remains useful for cases where fine control over transformations is needed, but it can be more verbose and complex for users unfamiliar with its syntax.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}