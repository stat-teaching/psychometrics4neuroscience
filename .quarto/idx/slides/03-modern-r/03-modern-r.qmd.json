{"title":"Modern R","markdown":{"yaml":{"title":"Modern R","incremental":true,"from":"markdown+emoji"},"headingText":"palettes","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: false\nknitr::opts_chunk$set(echo = FALSE,\n                      dev = \"svg\",\n                      fig.width = 7,\n                      fig.asp = 0.618,\n                      fig.align = \"center\",\n                      comment = \"#>\")\n```\n\n```{r}\n#| label: packages\n#| include: false\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(kableExtra)\n```\n\n```{r}\n#| label: ggplot2\n#| include: false\nmtheme <- function(size = 15){\n  theme_minimal(base_size = size, \n                base_family = \"sans\") +\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5),\n        strip.text = element_text(face = \"bold\"),\n        panel.grid.minor = element_blank())\n}\n\ntheme_set(mtheme())\n\noptions(ggplot2.continuous.colour=\"viridis\")\noptions(ggplot2.continuous.fill = \"viridis\")\nscale_colour_discrete <- scale_colour_viridis_d\nscale_fill_discrete <- scale_fill_viridis_d\n```\n\n# Reproducibility starter pack {.section}\n \n## Reproducibility starter pack :construction_worker:\n\n- A general purpose (or flexible enough) [programming language]{.imp} such as `r icons::fontawesome(\"r-project\")` or `r icons::fontawesome(\"python\")`\n- A [literate programming]{.imp} framework to integrate code and text\n- A [version control system]{.imp} to track projects\n- An [online repository]{.imp} for future-proof sharing\n\n## Disclaimers\n\n<center> **The best tool is the tool that does the job.** </center>\n\n- But there are some features that makes a tool better in terms of reproducibility, reducing the probability of errors and improve your coding skills.\n- There is nothing bad about using SPSS, Jasp or Jamovi. The real problem is that using a point-and-click software reduce the reproducibility. If you can use the scripting part, whatever the tool.\n- A general suggestion is to invest some of your time learning/improving a programming language for data pre-processing, analysis and reporting (tables, figures, etc.)\n\n# R Programming Language {.section}\n\n## R\n\n> R is a free software environment for statistical computing and graphics.\n\n- (TBH) It is not a proper general purpose programming language (such as C++ or Python).\n- R *packages* allow to do almost everything (file manager, image processing, webscraping, sending emails, coffee :smile:, etc.)\n- It is free and open-source\n- The community is wide, active thus solving problems is very easy\n- Force you to learn scripting but the are R-based GUI software (e.g., JAMOVI)\n\n## R - CRAN\n\nThe CRAN is the repository where package developers upload their packages and other users can install them.\n\n<center>\n\n```{r}\n#| echo: false\nknitr::include_url(\"https://cran.r-project.org/web/packages/\")\n```\n\n</center>\n\n. . .\n\n> As the saying goes: if something exist, there is an R package for doing it! :smile:\n\n## R - PYPL Index\n\n```{r}\n#| echo: false\n#| output: asis\n#| fig-cap: \"Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)\"\n\nknitr::include_graphics(\"img/r-pypl.png\")\n```\n\n## R - PYPL Index\n\nThe popularity is on a different scale compared to Python but still increasing:\n\n![Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)\n](img/pypl.svg){height=500}\n\n## R or Python?\n\n- Python is a very general-purpose language more powerful for general tasks.\n- I find python very useful for programming experiments, image processing, automatizing tasks and interacting with the operating system\n- R is still a little bit superior in terms of data manipulation and visualization. Python is faster and more powerful for complex models (e.g., machine learning, etc.)\n\n## Positron\n\nSometimes Python is not so easy to setup. In addition is not as interactive as R (i.e., line by line evaluation). Posit (ex. R Studio) recently created [Positron](https://positron.posit.co/) that is a new IDE working with R and Python at the same way.\n\n![](https://positron.posit.co/images/astropy.png){fig-align=\"center\"}\n\n## Modern R\n\n- For purist programmers, R is weird: arrays starts with 1, object-oriented programming is hidden, a lot of built-in vectorized functions, etc. The [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) book is really funny showing the strange R-stuff.\n- Despite the weirdness, R is widely used because it is intuitive (for non-programmers) and made for statistics and data manipulation\n- R is a language and as in spoken languages you can elegant, rude, ambiguous, funny, etc.\n- There are some tips to improve the readability and reproducibility of your code\n\n## Functional Programming\n\n> In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.\n\n- Despite R can be used both with an **imperative** and **object-oriented approach**, the functional side is quite powerful.\n- The basic idea is to decompose your code into small, testable and re-usable functions\n\n## Functional Programming, example...\n\nWe have a dataset (`mtcars`) and we want to calculate the mean, median, standard deviation, minimum and maximum of each column and store the result in a table.\n\n```{r}\n#| echo: true\nhead(mtcars)\nstr(mtcars)\n```\n\n## Functional Programming\n\nThe standard (~imperative) option is using a `for` loop, iterating through columns, calculate the values and store into another data structure.\n\n```{r}\n#| echo: true\nncols <- ncol(mtcars)\nmeans <- medians <- mins <- maxs <- rep(0, ncols)\n\nfor(i in 1:ncols){\n  means[i] <- mean(mtcars[[i]])\n  medians[i] <- median(mtcars[[i]])\n  mins[i] <- min(mtcars[[i]])\n  maxs[i] <- max(mtcars[[i]])\n}\n\nresults <- data.frame(means, medians, mins, maxs)\nresults$col <- names(mtcars)\n\nresults\n```\n\n## Functional Programming\n\nThe main idea is to decompose the problem writing a function and loop over the columns of the dataframe:\n\n```{r}\n#| echo: true\nsumm <- function(x){\n  data.frame(means = mean(x), \n             medians = median(x), \n             mins = min(x), \n             maxs = max(x))\n}\nncols <- ncol(mtcars)\ndfs <- vector(mode = \"list\", length = ncols)\n\nfor(i in 1:ncols){\n  dfs[[i]] <- summ(mtcars[[i]])\n}\n```\n\n## Functional Programming\n\n```{r}\n#| echo: true\n\nresults <- do.call(rbind, dfs)\nresults\n```\n\n## Functional Programming\n\nThe actual real functional way require using the built-in iteration tools `*apply`. In this way you avoid writing the verbose `for` loop.\n\n```{r}\n#| echo: true\nresults <- lapply(mtcars, summ)\nresults <- do.call(rbind, results)\nresults\n```\n\n## Functional Programming, `*apply`\n\n- The `*apply` family is one of the best tool in R. The idea is pretty simple: apply a function to each element of a list. \n- The powerful side is that in R everything can be considered as a list. A vector is a list of single elements, a dataframe is a list of columns etc.\n- Internally, R is still using a `for` loop but the verbose part (preallocation, choosing the iterator, indexing) is encapsulated into the `*apply` function.\n\n. . .\n\n```{r}\n#| eval: false\n#| echo: true\nmeans <- rep(0, ncol(mtcars))\nfor(i in 1:length(means)){\n  means[i] <- mean(mtcars[[i]])\n}\n\n# the same with sapply\nmeans <- sapply(mtcars, mean)\n```\n\n## `for` loops are bad?\n\n`for` loops are the core of each operation in R (and in every programming language). For complex operation thery are more readable and effective compared to `*apply`. In R we need extra care for writing efficent `for` loops.\n\nExtremely slow, no preallocation:\n\n```{r}\n#| eval: false\n#| echo: true\nres <- c()\nfor(i in 1:1000){\n  # do something\n  res[i] <- x\n}\n```\n\nVery fast, no difference compared to `*apply`\n\n```{r}\n#| eval: false\n#| echo: true\nres <- rep(0, 1000)\nfor(i in 1:length(res)){\n  # do something\n  res[i] <- x\n}\n```\n\n## `for` loops are bad?\n\nWe can formally compare the `for` loop approaches using the `microbenchmark` package:\n\n\n```{r}\n#| echo: true\nno_prealloc <- function(n = 100){\n    res <- c()\n    for(i in 1:n) res[i] <- rnorm(1)\n}\n\nprealloc <- function(n = 100){\n    res <- vector(mode = \"numeric\", length = n)\n    for(i in 1:n) res[i] <- rnorm(1)\n}\n\nmicrobenchmark::microbenchmark(\n    no_prealloc = no_prealloc(1000),\n    prealloc = prealloc(1000)\n)\n```\n\n## `for` loops are bad?\n\nIn fact, when the `for` loop is written appropriately, the performance are the same (or even better) compared to `*apply`:\n\n```{r}\n#| echo: true\n\nlibrary(purrr) # for map\niter <- 500\n\nmicrobenchmark::microbenchmark(\n    for_no_prealloc = no_prealloc(iter),\n    for_prealloc = prealloc(iter),\n    sapply = sapply(1:iter, function(x) rnorm(1)),\n    map_dbl = map_dbl(1:iter, function(x) rnorm(1)),\n    vapply = vapply(1:iter, function(x) rnorm(1), FUN.VALUE = double(1)),\n    times = 500\n) |> summary()\n```\n\n## With `*apply` you can do crazy stuff!\n\n```{r}\n#| echo: true\nfuns <- list(mean = mean, sd = sd, min = min, max = max, median = median)\nsapply(funs, function(f) lapply(mtcars, function(x) f(x)))\n```\n\n\n## Why functional programming?\n\n- We can write less and reusable code that can be shared and used in multiple projects\n- The scripts are more compact, easy to modify and less error prone (imagine that you want to improve the `summ` function, you only need to change it once instead of touching the `for` loop)\n- Functions can be easily and consistently documented (see [roxygen](https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html) documentation) improving the reproducibility and readability of your code\n\n## More about functional programming in R\n\n- Advanced R by Hadley Wickham, section on Functional Programming ([https://adv-r.hadley.nz/fp.html](https://adv-r.hadley.nz/fp.html))\n- Hands-On Programming with R by Garrett Grolemund [https://rstudio-education.github.io/hopr/](https://rstudio-education.github.io/hopr/)\n- Hadley Wickham: [The Joy of Functional Programming (for Data Science)](https://www.youtube.com/watch?v=bzUmK0Y07ck)\n- [Bruno Rodrigues Youtube Channel](https://www.youtube.com/@brodriguesco/videos)\n\n. . .\n\n<center>\n\n::: {layout-ncol=2}\n![Advanced R](img/advanced-r.jpg){width=200 fig-align=\"center\"}\n![Hands-on Programming With R](img/hand-on-programming.jpeg){width=200 fig-align=\"center\"}\n:::\n\n</center>\n\n# A small example\n\n## A small example\n\nTake the dataset `iris` and do the following operations in the most readable and efficient way that you can.\n\n- fit a linear model (choose the `y` and `x` that you want) for each `Species` on the full dataset\n- fit a linear model (choose the `y` and `x` that you want) for each `Species` but resampling with replacement (bootstrapping, choose the number of iterations that you want) the rows within each group\n- (choose the `y` and `x` that you want) for each `Species` doing a leave-one-out analysis within each group\n- organize the three steps into separated datasets in a nice and readable format (nice column names, not strange characters, spaces, etc.)\n- show the results with a plot of your choice\n\n## A more advanced approach, R packages\n\nR packages are not only on CRAN. You can (pretty) easily create a package and put it on Github. For example, if you keep using some functions in your project, write a general version and put them into a package.\n\n![[github.com/filippogambarota/filor](https://github.com/filippogambarota/filor)](img/filor.png)\n\n## A more advanced approach, R packages\n\nIf your functions are project-specific you can define them into your scripts or write some R scripts only with functions and `source()` them into the global environment.\n\n```\nproject/\n├─ R/\n│  ├─ utils.R\n├─ analysis.R\n```\n\nAnd inside `utils.R` you have some functions:\n\n```{r}\n#| eval: false\n#| echo: true\n\nmyfun <- function(x) {\n  # something\n}\n```\n\nThen you can load the function using `source(\"R/utils.R)` at the beginning of `analysis.R`:\n\n```{r}\n#| eval: false\n#| echo: true\nsource(\"R/utils.R\")\n```\n\n## Analysis project as R package\n\nThe R project structure is really interesting to organize a data analysis pipeline. In fact, you can use the project structure. @Vuorre2021-dr and @Marwick2018-zm describe in details the idea.\n\nThe general approach is:\n\n1. Create an R Studio project `.Rproj` file\n2. Create your directories, put scripts, data, etc.\n3. Create an `R/` folder and put your scripts with functions\n4. Create a `DESCRIPTION` file using `usethis::use_description(check_name = FALSE)`\n5. Then you can load your functions without source and with `devtools::load_all()` (same as `library()`)\n\n# Let's see an example!\n\n## The Tidy approach\n\nThe `tidyverse` is a series of high-quality R packages to do modern data science:\n\n::: {.nonincremental}\n- data manipulation (`dplyr`, `tidyr`)\n- plotting (`ggplot2`)\n- reporting (`rmarkdown`)\n- string manipulation (`stringr`)\n- functionals (`purrr`)\n- ...\n:::\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/tidyverse.svg){fig-align=\"center\" width=400}\n\n## The Tidy approach - Pipes\n\nOne of the great improvement from the `tidyverse` is the usage of the pipe `%>%` now introduced in base R as `|>`. You will se these symbols a lot when looking at modern R code.\n\n. . .\n\nThe idea is very simple, the standard pattern to apply a function is `function(argument)`. The pipe can reverse the pattern as `argument |> function()`. Normally when we apply multiple functions progressively the pattern is this:\n\n. . .\n\n```{r}\n#| eval: false\n#| echo: true\nx <- rnorm(100)\nx <- round(x, 3)\nx <- abs(x)\nx <- as.character(x)\n```\n\n## The Tidy approach - Pipes\n\nWhen using the pipe, we remove the redundand assignment `<-` pattern:\n\n```{r}\n#| eval: false\n#| echo: true\nx <- rnorm(100)\nx |>\n  round(3) |>\n  abs() |>\n  as.character()\n```\n\nThe pipe can be read as *\"from **x** apply `round`, then `abs`, etc.\".* The first argument of the piped function is assumed to be the result of the previus call.\n\n## More about the Tidy approach\n\nThe `tidy` approach contains tons of functions and packages. The overall philosophy can be deepen in the R for Data Science book.\n\n![[https://r4ds.hadley.nz/](https://r4ds.hadley.nz/)](img/r4ds.jpg)\n\n## ggplot2\n\nOnly an quick mention to `ggplot2` [https://ggplot2-book.org/](https://ggplot2-book.org/) (part of the `tidyverse`) that is an amazing package for data visualization following the *piping* and *tidy* approach. Is the implementation of the **grammar of graphics** idea.\n\n```{r}\n#| eval: false\n#| echo: true\n\nlibrary(tidyverse)\n\niris |>\n  mutate(wi = runif(n())) |>\n  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n  geom_point(aes(size = wi)) +\n  geom_smooth(method = \"lm\", se = FALSE)\n  guides(size = \"none\") +\n  theme_minimal(15)\n```\n\n## ggplot2\n\n```{r}\n#| echo: false\nlibrary(tidyverse)\niris |>\n  mutate(wi = runif(n())) |>\n  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n  geom_point(aes(size = wi)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  guides(size = \"none\") +\n  theme_minimal(15)\n```\n\n## Base R version\n\nMore verbose, more hard coding, more steps and intermediate objects.\n\n```{r}\n#| eval: false\n#| echo: true\niris_l <- split(iris, iris$Species)\nlms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))\n\nplot(iris$Sepal.Length, \n     iris$Petal.Width, \n     col = as.numeric(iris$Species), pch = 19)\n\nabline(lms[[1]], col = 1, lwd = 2)\nabline(lms[[2]], col = 2, lwd = 2)\nabline(lms[[3]], col = 3, lwd = 2)\n\nlegend(\"topleft\", legend = levels(iris$Species), fill = 1:3)\n```\n\n## Base R version\n\n```{r}\n#| echo: false\n\niris_l <- split(iris, iris$Species)\nlms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))\n\nplot(iris$Sepal.Length, \n     iris$Petal.Width, \n     col = as.numeric(iris$Species), pch = 19)\n\nabline(lms[[1]], col = 1, lwd = 2)\nabline(lms[[2]], col = 2, lwd = 2)\nabline(lms[[3]], col = 3, lwd = 2)\n\nlegend(\"topleft\", legend = levels(iris$Species), fill = 1:3)\n```\n\n## More on ggplot2\n\nThe `ggplot2` book [https://ggplot2-book.org/](https://ggplot2-book.org/) is a great resource to produce high-quality, publication ready plots. Clearly, the advantage of producing the figures entirely writing code are immense in terms of reusability and reproducibility.\n\n::: {layout-ncol=2}\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/ggplot2.svg){width=300 fig-align=\"center\"}\n\n![](img/ggplot2.jpg){width=300 fig-align=\"center\"}\n:::\n\n## Something crazy in the `tidyverse`\n\nWithout going into details, I want to show you a very interesting approach that you can do with the `tidyverse` functions.\n\nLet's assume you want to do a leave-one-out analysis thus fitting the same models on a dataset, removing one observation at time.\n\nYou can do it in base R with a loop or other methods, but the see so-called *many-models* approach. See [https://r4ds.had.co.nz/many-models.html](https://r4ds.had.co.nz/many-models.html) and [https://www.youtube.com/watch?v=rz3_FDVt9eg](https://www.youtube.com/watch?v=rz3_FDVt9eg).\n\n## Something crazy in the `tidyverse`\n\nLet's define some functions:\n\n```{r}\n#| echo: true\nleave1out <- function(data){\n  idx <- 1:nrow(data)\n  ll <- lapply(idx, function(i) data[-i, ])\n  names(ll) <- paste0(\"no\", idx)\n  c(no0 = list(data), ll)\n}\n\nfit_model <- function(data){\n  lm(Sepal.Length ~ Petal.Width, data = data)\n}\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\n#| echo: true\ndat <- tibble(data = leave1out(iris[1:20, ]))\ndat |> \n  mutate(removed = names(data)) |> \n  head()\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\ndat |> \n  mutate(removed = names(data)) |> \n  mutate(fit = map(data, fit_model),\n         results = map(fit, broom::tidy)) |> \n  head()\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\n#| eval: false\n#| echo: true\ndat |> \n  mutate(removed = names(data)) |> \n  mutate(fit = map(data, fit_model),\n         results = map(fit, broom::tidy)) |> \n  unnest(results) |> \n  ggplot(aes(x = removed, y = estimate)) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~term, scales = \"free\")\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\n#| echo: false\ndat |> \n  mutate(removed = names(data)) |> \n  mutate(fit = map(data, fit_model),\n         results = map(fit, broom::tidy)) |> \n  unnest(results) |> \n  ggplot(aes(x = parse_number(removed), y = estimate)) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~term, scales = \"free\") +\n  xlab(\"Removed\")\n```\n\n## Quick tables\n\n```{r}\ngtsummary::tbl_summary(iris)\n```\n\n## Quick tables from models\n\n```{r}\n#| echo: true\n\nfit <- lm(Sepal.Length ~ Petal.Width, data = iris)\nsjPlot::tab_model(fit)\n```\n\n## Quick tables from models\n\n```{r}\n#| echo: true\n\ngtsummary::tbl_regression(fit)\n```\n\n## References {.refs}\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| include: false\nknitr::opts_chunk$set(echo = FALSE,\n                      dev = \"svg\",\n                      fig.width = 7,\n                      fig.asp = 0.618,\n                      fig.align = \"center\",\n                      comment = \"#>\")\n```\n\n```{r}\n#| label: packages\n#| include: false\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(kableExtra)\n```\n\n```{r}\n#| label: ggplot2\n#| include: false\nmtheme <- function(size = 15){\n  theme_minimal(base_size = size, \n                base_family = \"sans\") +\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5),\n        strip.text = element_text(face = \"bold\"),\n        panel.grid.minor = element_blank())\n}\n\ntheme_set(mtheme())\n\n# palettes\noptions(ggplot2.continuous.colour=\"viridis\")\noptions(ggplot2.continuous.fill = \"viridis\")\nscale_colour_discrete <- scale_colour_viridis_d\nscale_fill_discrete <- scale_fill_viridis_d\n```\n\n# Reproducibility starter pack {.section}\n \n## Reproducibility starter pack :construction_worker:\n\n- A general purpose (or flexible enough) [programming language]{.imp} such as `r icons::fontawesome(\"r-project\")` or `r icons::fontawesome(\"python\")`\n- A [literate programming]{.imp} framework to integrate code and text\n- A [version control system]{.imp} to track projects\n- An [online repository]{.imp} for future-proof sharing\n\n## Disclaimers\n\n<center> **The best tool is the tool that does the job.** </center>\n\n- But there are some features that makes a tool better in terms of reproducibility, reducing the probability of errors and improve your coding skills.\n- There is nothing bad about using SPSS, Jasp or Jamovi. The real problem is that using a point-and-click software reduce the reproducibility. If you can use the scripting part, whatever the tool.\n- A general suggestion is to invest some of your time learning/improving a programming language for data pre-processing, analysis and reporting (tables, figures, etc.)\n\n# R Programming Language {.section}\n\n## R\n\n> R is a free software environment for statistical computing and graphics.\n\n- (TBH) It is not a proper general purpose programming language (such as C++ or Python).\n- R *packages* allow to do almost everything (file manager, image processing, webscraping, sending emails, coffee :smile:, etc.)\n- It is free and open-source\n- The community is wide, active thus solving problems is very easy\n- Force you to learn scripting but the are R-based GUI software (e.g., JAMOVI)\n\n## R - CRAN\n\nThe CRAN is the repository where package developers upload their packages and other users can install them.\n\n<center>\n\n```{r}\n#| echo: false\nknitr::include_url(\"https://cran.r-project.org/web/packages/\")\n```\n\n</center>\n\n. . .\n\n> As the saying goes: if something exist, there is an R package for doing it! :smile:\n\n## R - PYPL Index\n\n```{r}\n#| echo: false\n#| output: asis\n#| fig-cap: \"Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)\"\n\nknitr::include_graphics(\"img/r-pypl.png\")\n```\n\n## R - PYPL Index\n\nThe popularity is on a different scale compared to Python but still increasing:\n\n![Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)\n](img/pypl.svg){height=500}\n\n## R or Python?\n\n- Python is a very general-purpose language more powerful for general tasks.\n- I find python very useful for programming experiments, image processing, automatizing tasks and interacting with the operating system\n- R is still a little bit superior in terms of data manipulation and visualization. Python is faster and more powerful for complex models (e.g., machine learning, etc.)\n\n## Positron\n\nSometimes Python is not so easy to setup. In addition is not as interactive as R (i.e., line by line evaluation). Posit (ex. R Studio) recently created [Positron](https://positron.posit.co/) that is a new IDE working with R and Python at the same way.\n\n![](https://positron.posit.co/images/astropy.png){fig-align=\"center\"}\n\n## Modern R\n\n- For purist programmers, R is weird: arrays starts with 1, object-oriented programming is hidden, a lot of built-in vectorized functions, etc. The [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) book is really funny showing the strange R-stuff.\n- Despite the weirdness, R is widely used because it is intuitive (for non-programmers) and made for statistics and data manipulation\n- R is a language and as in spoken languages you can elegant, rude, ambiguous, funny, etc.\n- There are some tips to improve the readability and reproducibility of your code\n\n## Functional Programming\n\n> In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.\n\n- Despite R can be used both with an **imperative** and **object-oriented approach**, the functional side is quite powerful.\n- The basic idea is to decompose your code into small, testable and re-usable functions\n\n## Functional Programming, example...\n\nWe have a dataset (`mtcars`) and we want to calculate the mean, median, standard deviation, minimum and maximum of each column and store the result in a table.\n\n```{r}\n#| echo: true\nhead(mtcars)\nstr(mtcars)\n```\n\n## Functional Programming\n\nThe standard (~imperative) option is using a `for` loop, iterating through columns, calculate the values and store into another data structure.\n\n```{r}\n#| echo: true\nncols <- ncol(mtcars)\nmeans <- medians <- mins <- maxs <- rep(0, ncols)\n\nfor(i in 1:ncols){\n  means[i] <- mean(mtcars[[i]])\n  medians[i] <- median(mtcars[[i]])\n  mins[i] <- min(mtcars[[i]])\n  maxs[i] <- max(mtcars[[i]])\n}\n\nresults <- data.frame(means, medians, mins, maxs)\nresults$col <- names(mtcars)\n\nresults\n```\n\n## Functional Programming\n\nThe main idea is to decompose the problem writing a function and loop over the columns of the dataframe:\n\n```{r}\n#| echo: true\nsumm <- function(x){\n  data.frame(means = mean(x), \n             medians = median(x), \n             mins = min(x), \n             maxs = max(x))\n}\nncols <- ncol(mtcars)\ndfs <- vector(mode = \"list\", length = ncols)\n\nfor(i in 1:ncols){\n  dfs[[i]] <- summ(mtcars[[i]])\n}\n```\n\n## Functional Programming\n\n```{r}\n#| echo: true\n\nresults <- do.call(rbind, dfs)\nresults\n```\n\n## Functional Programming\n\nThe actual real functional way require using the built-in iteration tools `*apply`. In this way you avoid writing the verbose `for` loop.\n\n```{r}\n#| echo: true\nresults <- lapply(mtcars, summ)\nresults <- do.call(rbind, results)\nresults\n```\n\n## Functional Programming, `*apply`\n\n- The `*apply` family is one of the best tool in R. The idea is pretty simple: apply a function to each element of a list. \n- The powerful side is that in R everything can be considered as a list. A vector is a list of single elements, a dataframe is a list of columns etc.\n- Internally, R is still using a `for` loop but the verbose part (preallocation, choosing the iterator, indexing) is encapsulated into the `*apply` function.\n\n. . .\n\n```{r}\n#| eval: false\n#| echo: true\nmeans <- rep(0, ncol(mtcars))\nfor(i in 1:length(means)){\n  means[i] <- mean(mtcars[[i]])\n}\n\n# the same with sapply\nmeans <- sapply(mtcars, mean)\n```\n\n## `for` loops are bad?\n\n`for` loops are the core of each operation in R (and in every programming language). For complex operation thery are more readable and effective compared to `*apply`. In R we need extra care for writing efficent `for` loops.\n\nExtremely slow, no preallocation:\n\n```{r}\n#| eval: false\n#| echo: true\nres <- c()\nfor(i in 1:1000){\n  # do something\n  res[i] <- x\n}\n```\n\nVery fast, no difference compared to `*apply`\n\n```{r}\n#| eval: false\n#| echo: true\nres <- rep(0, 1000)\nfor(i in 1:length(res)){\n  # do something\n  res[i] <- x\n}\n```\n\n## `for` loops are bad?\n\nWe can formally compare the `for` loop approaches using the `microbenchmark` package:\n\n\n```{r}\n#| echo: true\nno_prealloc <- function(n = 100){\n    res <- c()\n    for(i in 1:n) res[i] <- rnorm(1)\n}\n\nprealloc <- function(n = 100){\n    res <- vector(mode = \"numeric\", length = n)\n    for(i in 1:n) res[i] <- rnorm(1)\n}\n\nmicrobenchmark::microbenchmark(\n    no_prealloc = no_prealloc(1000),\n    prealloc = prealloc(1000)\n)\n```\n\n## `for` loops are bad?\n\nIn fact, when the `for` loop is written appropriately, the performance are the same (or even better) compared to `*apply`:\n\n```{r}\n#| echo: true\n\nlibrary(purrr) # for map\niter <- 500\n\nmicrobenchmark::microbenchmark(\n    for_no_prealloc = no_prealloc(iter),\n    for_prealloc = prealloc(iter),\n    sapply = sapply(1:iter, function(x) rnorm(1)),\n    map_dbl = map_dbl(1:iter, function(x) rnorm(1)),\n    vapply = vapply(1:iter, function(x) rnorm(1), FUN.VALUE = double(1)),\n    times = 500\n) |> summary()\n```\n\n## With `*apply` you can do crazy stuff!\n\n```{r}\n#| echo: true\nfuns <- list(mean = mean, sd = sd, min = min, max = max, median = median)\nsapply(funs, function(f) lapply(mtcars, function(x) f(x)))\n```\n\n\n## Why functional programming?\n\n- We can write less and reusable code that can be shared and used in multiple projects\n- The scripts are more compact, easy to modify and less error prone (imagine that you want to improve the `summ` function, you only need to change it once instead of touching the `for` loop)\n- Functions can be easily and consistently documented (see [roxygen](https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html) documentation) improving the reproducibility and readability of your code\n\n## More about functional programming in R\n\n- Advanced R by Hadley Wickham, section on Functional Programming ([https://adv-r.hadley.nz/fp.html](https://adv-r.hadley.nz/fp.html))\n- Hands-On Programming with R by Garrett Grolemund [https://rstudio-education.github.io/hopr/](https://rstudio-education.github.io/hopr/)\n- Hadley Wickham: [The Joy of Functional Programming (for Data Science)](https://www.youtube.com/watch?v=bzUmK0Y07ck)\n- [Bruno Rodrigues Youtube Channel](https://www.youtube.com/@brodriguesco/videos)\n\n. . .\n\n<center>\n\n::: {layout-ncol=2}\n![Advanced R](img/advanced-r.jpg){width=200 fig-align=\"center\"}\n![Hands-on Programming With R](img/hand-on-programming.jpeg){width=200 fig-align=\"center\"}\n:::\n\n</center>\n\n# A small example\n\n## A small example\n\nTake the dataset `iris` and do the following operations in the most readable and efficient way that you can.\n\n- fit a linear model (choose the `y` and `x` that you want) for each `Species` on the full dataset\n- fit a linear model (choose the `y` and `x` that you want) for each `Species` but resampling with replacement (bootstrapping, choose the number of iterations that you want) the rows within each group\n- (choose the `y` and `x` that you want) for each `Species` doing a leave-one-out analysis within each group\n- organize the three steps into separated datasets in a nice and readable format (nice column names, not strange characters, spaces, etc.)\n- show the results with a plot of your choice\n\n## A more advanced approach, R packages\n\nR packages are not only on CRAN. You can (pretty) easily create a package and put it on Github. For example, if you keep using some functions in your project, write a general version and put them into a package.\n\n![[github.com/filippogambarota/filor](https://github.com/filippogambarota/filor)](img/filor.png)\n\n## A more advanced approach, R packages\n\nIf your functions are project-specific you can define them into your scripts or write some R scripts only with functions and `source()` them into the global environment.\n\n```\nproject/\n├─ R/\n│  ├─ utils.R\n├─ analysis.R\n```\n\nAnd inside `utils.R` you have some functions:\n\n```{r}\n#| eval: false\n#| echo: true\n\nmyfun <- function(x) {\n  # something\n}\n```\n\nThen you can load the function using `source(\"R/utils.R)` at the beginning of `analysis.R`:\n\n```{r}\n#| eval: false\n#| echo: true\nsource(\"R/utils.R\")\n```\n\n## Analysis project as R package\n\nThe R project structure is really interesting to organize a data analysis pipeline. In fact, you can use the project structure. @Vuorre2021-dr and @Marwick2018-zm describe in details the idea.\n\nThe general approach is:\n\n1. Create an R Studio project `.Rproj` file\n2. Create your directories, put scripts, data, etc.\n3. Create an `R/` folder and put your scripts with functions\n4. Create a `DESCRIPTION` file using `usethis::use_description(check_name = FALSE)`\n5. Then you can load your functions without source and with `devtools::load_all()` (same as `library()`)\n\n# Let's see an example!\n\n## The Tidy approach\n\nThe `tidyverse` is a series of high-quality R packages to do modern data science:\n\n::: {.nonincremental}\n- data manipulation (`dplyr`, `tidyr`)\n- plotting (`ggplot2`)\n- reporting (`rmarkdown`)\n- string manipulation (`stringr`)\n- functionals (`purrr`)\n- ...\n:::\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/tidyverse.svg){fig-align=\"center\" width=400}\n\n## The Tidy approach - Pipes\n\nOne of the great improvement from the `tidyverse` is the usage of the pipe `%>%` now introduced in base R as `|>`. You will se these symbols a lot when looking at modern R code.\n\n. . .\n\nThe idea is very simple, the standard pattern to apply a function is `function(argument)`. The pipe can reverse the pattern as `argument |> function()`. Normally when we apply multiple functions progressively the pattern is this:\n\n. . .\n\n```{r}\n#| eval: false\n#| echo: true\nx <- rnorm(100)\nx <- round(x, 3)\nx <- abs(x)\nx <- as.character(x)\n```\n\n## The Tidy approach - Pipes\n\nWhen using the pipe, we remove the redundand assignment `<-` pattern:\n\n```{r}\n#| eval: false\n#| echo: true\nx <- rnorm(100)\nx |>\n  round(3) |>\n  abs() |>\n  as.character()\n```\n\nThe pipe can be read as *\"from **x** apply `round`, then `abs`, etc.\".* The first argument of the piped function is assumed to be the result of the previus call.\n\n## More about the Tidy approach\n\nThe `tidy` approach contains tons of functions and packages. The overall philosophy can be deepen in the R for Data Science book.\n\n![[https://r4ds.hadley.nz/](https://r4ds.hadley.nz/)](img/r4ds.jpg)\n\n## ggplot2\n\nOnly an quick mention to `ggplot2` [https://ggplot2-book.org/](https://ggplot2-book.org/) (part of the `tidyverse`) that is an amazing package for data visualization following the *piping* and *tidy* approach. Is the implementation of the **grammar of graphics** idea.\n\n```{r}\n#| eval: false\n#| echo: true\n\nlibrary(tidyverse)\n\niris |>\n  mutate(wi = runif(n())) |>\n  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n  geom_point(aes(size = wi)) +\n  geom_smooth(method = \"lm\", se = FALSE)\n  guides(size = \"none\") +\n  theme_minimal(15)\n```\n\n## ggplot2\n\n```{r}\n#| echo: false\nlibrary(tidyverse)\niris |>\n  mutate(wi = runif(n())) |>\n  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n  geom_point(aes(size = wi)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  guides(size = \"none\") +\n  theme_minimal(15)\n```\n\n## Base R version\n\nMore verbose, more hard coding, more steps and intermediate objects.\n\n```{r}\n#| eval: false\n#| echo: true\niris_l <- split(iris, iris$Species)\nlms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))\n\nplot(iris$Sepal.Length, \n     iris$Petal.Width, \n     col = as.numeric(iris$Species), pch = 19)\n\nabline(lms[[1]], col = 1, lwd = 2)\nabline(lms[[2]], col = 2, lwd = 2)\nabline(lms[[3]], col = 3, lwd = 2)\n\nlegend(\"topleft\", legend = levels(iris$Species), fill = 1:3)\n```\n\n## Base R version\n\n```{r}\n#| echo: false\n\niris_l <- split(iris, iris$Species)\nlms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))\n\nplot(iris$Sepal.Length, \n     iris$Petal.Width, \n     col = as.numeric(iris$Species), pch = 19)\n\nabline(lms[[1]], col = 1, lwd = 2)\nabline(lms[[2]], col = 2, lwd = 2)\nabline(lms[[3]], col = 3, lwd = 2)\n\nlegend(\"topleft\", legend = levels(iris$Species), fill = 1:3)\n```\n\n## More on ggplot2\n\nThe `ggplot2` book [https://ggplot2-book.org/](https://ggplot2-book.org/) is a great resource to produce high-quality, publication ready plots. Clearly, the advantage of producing the figures entirely writing code are immense in terms of reusability and reproducibility.\n\n::: {layout-ncol=2}\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/ggplot2.svg){width=300 fig-align=\"center\"}\n\n![](img/ggplot2.jpg){width=300 fig-align=\"center\"}\n:::\n\n## Something crazy in the `tidyverse`\n\nWithout going into details, I want to show you a very interesting approach that you can do with the `tidyverse` functions.\n\nLet's assume you want to do a leave-one-out analysis thus fitting the same models on a dataset, removing one observation at time.\n\nYou can do it in base R with a loop or other methods, but the see so-called *many-models* approach. See [https://r4ds.had.co.nz/many-models.html](https://r4ds.had.co.nz/many-models.html) and [https://www.youtube.com/watch?v=rz3_FDVt9eg](https://www.youtube.com/watch?v=rz3_FDVt9eg).\n\n## Something crazy in the `tidyverse`\n\nLet's define some functions:\n\n```{r}\n#| echo: true\nleave1out <- function(data){\n  idx <- 1:nrow(data)\n  ll <- lapply(idx, function(i) data[-i, ])\n  names(ll) <- paste0(\"no\", idx)\n  c(no0 = list(data), ll)\n}\n\nfit_model <- function(data){\n  lm(Sepal.Length ~ Petal.Width, data = data)\n}\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\n#| echo: true\ndat <- tibble(data = leave1out(iris[1:20, ]))\ndat |> \n  mutate(removed = names(data)) |> \n  head()\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\ndat |> \n  mutate(removed = names(data)) |> \n  mutate(fit = map(data, fit_model),\n         results = map(fit, broom::tidy)) |> \n  head()\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\n#| eval: false\n#| echo: true\ndat |> \n  mutate(removed = names(data)) |> \n  mutate(fit = map(data, fit_model),\n         results = map(fit, broom::tidy)) |> \n  unnest(results) |> \n  ggplot(aes(x = removed, y = estimate)) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~term, scales = \"free\")\n```\n\n## Something crazy in the `tidyverse`\n\n```{r}\n#| echo: false\ndat |> \n  mutate(removed = names(data)) |> \n  mutate(fit = map(data, fit_model),\n         results = map(fit, broom::tidy)) |> \n  unnest(results) |> \n  ggplot(aes(x = parse_number(removed), y = estimate)) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~term, scales = \"free\") +\n  xlab(\"Removed\")\n```\n\n## Quick tables\n\n```{r}\ngtsummary::tbl_summary(iris)\n```\n\n## Quick tables from models\n\n```{r}\n#| echo: true\n\nfit <- lm(Sepal.Length ~ Petal.Width, data = iris)\nsjPlot::tab_model(fit)\n```\n\n## Quick tables from models\n\n```{r}\n#| echo: true\n\ngtsummary::tbl_regression(fit)\n```\n\n## References {.refs}\n\n"},"formats":{"minimal-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"minimal-revealjs","base-format":"revealjs","extension-name":"minimal"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":[],"incremental":true,"from":"markdown+emoji","output-file":"03-modern-r.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.37","auto-stretch":true,"theme":["default","../../_extensions/filippogambarota/minimal/custom.scss"],"template-partials":["../../_extensions/filippogambarota/minimal/title-slide.html"],"revealjs-plugins":[],"author":"Filippo Gambarota, PhD","subtitle":"Psicometria per le Neuroscienze Cognitive","bibliography":["https://raw.githubusercontent.com/filippogambarota/bib-database/main/references.bib"],"title":"Modern R"}}},"projectFormats":["html"]}