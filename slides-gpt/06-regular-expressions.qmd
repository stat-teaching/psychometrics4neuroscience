---
title: 15 - Regex
book: R4DS
link: "[https://r4ds.hadley.nz/regexps.html](https://r4ds.hadley.nz/regexps.html)"
---

## Data and packages

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(babynames)
```


## Data and packages

-   `fruit` contains the names of 80 fruits.
-   `words` contains 980 common English words.
-   `sentences` contains 720 short sentences.

## Pattern basics

```{r}
str_view(fruit, "berry")
```

```{r}
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
```

```{r}
str_view(fruit, "a...e")
```

## Pattern basics

**Quantifiers** control how many times a pattern can match:

-   `?` makes a pattern optional (i.e. it matches 0 or 1 times)
-   `+` lets a pattern repeat (i.e. it matches at least once)
-   `*` lets a pattern be optional or repeat (i.e. it matches any number of times, including 0).

```{r}
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")

# ab+ matches an "a", followed by at least one "b".
str_view(c("a", "ab", "abb"), "ab+")

# ab* matches an "a", followed by any number of "b"s.
str_view(c("a", "ab", "abb"), "ab*")
```

## Pattern basics

```{r}
str_view(words, "[aeiou]x[aeiou]")
str_view(words, "[^aeiou]y[^aeiou]")
```

## Pattern basics

```{r}
str_view(fruit, "apple|melon|nut")
str_view(fruit, "aa|ee|ii|oo|uu")
```

## Detect matches

```{r}
str_detect(c("a", "b", "c"), "[aeiou]")
```

## Detect matches

```{r}
babynames |> 
  filter(str_detect(name, "x")) |> 
  count(name, wt = n, sort = TRUE)
```

## Detect matches

```{r}
babynames |> 
  group_by(year) |> 
  summarize(prop_x = mean(str_detect(name, "x")))
```

## Count matches

```{r}
x <- c("apple", "banana", "pear")
str_count(x, "p")
```

## Count matches

```{r}
str_count("abababa", "aba")
str_view("abababa", "aba")
```

## Count matches

```{r}
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

## Count matches

```{r}
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

## Replace values

```{r}
x <- c("apple", "pear", "banana")
str_replace_all(x, "[aeiou]", "-")
```

## Replace values

```{r}
x <- c("apple", "pear", "banana")
str_remove_all(x, "[aeiou]")
```

## Anchors

```{r}
str_view(fruit, "^a")
str_view(fruit, "a$")
```

## Anchors

```{r}
str_view(fruit, "apple")
str_view(fruit, "^apple$")
```